 - Create untill inside fundamental-ngx it will be fully ready following components
    - input
    - Text area
    - String component
    - import button
    - Select
    - Radio-group
    - Checkbox Group
    - Import date picker
    - Combobox.


- Create Page component with ability to go back
- Create dymamic action by action decorators or by OSS
- Meta Action List
  - ShowCase buttons, links
- Meta Content Page (detail)
- Traits to also embed object to the page
- Traits to show detail as hover
- Forms
- Application.oss -> DashboardPage, DashbaordLayout
  - ShellBar, that will accepts actions to the product menu


- It would be cool if I am able to do datatable.
- Investigate option to be able to switch into the FormControls instead of ngModels.


1) Create prototype of form component that will wrap details of the layout and and individual form Field

<fdp-form-group [isFiveZoneLayout]="true" hingLayout="inlined"
                [formGroup]="fg"
                [object]="user"
                [errorHanlding]="'navigate'"
                (onSubmit)="save($event)" (navigateToError)="onGoToError($event)"
                >

  <fdp-form-field label="email"
                  id="email"
                  zone="left"
                  rank="10"
                  placeholder="email" [required]="true">
    <fdp-input type="email" ></fdp-input>
  </fdp-form-field>

  <fdp-form-field required="true"
                  label="My Favorite Colors"
                  placeholder="email"
                  id="colors"
                  hint="Pick one of your favorite color" zone="right"
                  rank="10"
                  >
    <fdp-select [list]="myColors"></fdp-select>
  </fdp-form-field>
</fdp-form-group>


=> fdp-form-group should have  binding its object (entity), from which we should be able to
register automatically form controls
   - use object to set initial value to control if used
   - fg - if used then controls from child component will be registed with this fg so app
   can listen for changes.
   - used to set hints layouts

form field |
---------- |

- Each form field must have ID, that we will use to :
    - Register Form Control and set default value
        -> From object binding
        -> Form Group

Will query its FormControls
 - Form Field will be responsible for triggering change detection
 - Will use StateChange to listen for changes on the form Control level
 - At the end of ngAfterContentInit it will perfom validation if its correct type
 - will access placeholder to set it automatically to the control
 - Will have label and id
 - It will handle errors
 - handl required flag.
    https://sap.github.io/fundamental-styles/components/form.html
- It will inject error component
- hint component



Form Control |
------------ |

- Need to Inject:
  - Current ElementRef - if none will be used ngControl this will be used
  - NgControl (this will be used if we are using NgModel, ControlField)
  - NgForm - parent form


 - Need to introduce base class representing BaseInputField
 - will use doCheck, onChanges, onINit, OnDestroy
  - It needs to have readonly stateChanged to be used by formFiedl to broad case every change
- Base - Will have disabled, here

 - Will implement new abstract class that we will use to register a provider.
 - we will use similar approach like MD

 export abstract class FormFieldControl {
   value: T | null;

   stateChanged: Subject<any>

   id: string

   placeholder

   ngControl: NgControl | null

   required: boolean

   disabled: boolean

   hasError: boolean
 }


 BaseInputField implements ControlValueAccessor and FormFieldControl {


 }








